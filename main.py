import requests
import uuid
import json
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CERTIFICATE_PATH = os.getenv("CERTIFICATE_PATH")
URL_TOKEN = os.getenv("URL_TOKEN")
URL_CHAT = os.getenv("URL_CHAT")
AUTHORIZATION_HEADER = os.getenv("AUTHORIZATION_HEADER")
SCOPE = os.getenv("SCOPE")
CONTENT_TYPE_FORM = 'application/x-www-form-urlencoded'
CONTENT_TYPE_JSON = 'application/json'
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
STICKER_FILE_ID = 'CAACAgIAAxkBAAEMJ6xmTFZnpp1E4c2smC_aJBobddxc4gACnlIAAg3eYEpmdLVnAS-J3jUE'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à File ID —Å—Ç–∏–∫–µ—Ä–∞

def get_access_token():
    headers = {
        'Content-Type': CONTENT_TYPE_FORM,
        'Accept': 'application/json',
        'RqUID': str(uuid.uuid4()),  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ RqUID
        'Authorization': AUTHORIZATION_HEADER
    }
    response = requests.post(URL_TOKEN, headers=headers, data=SCOPE, verify=CERTIFICATE_PATH)
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
    token_data = response.json()
    return token_data.get('access_token')

def make_chat_request(access_token):
    payload = {
        "model": "GigaChat",
        "messages": [
            {
                "role": "user",
                "content": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?"
            }
        ],
        "temperature": 1,
        "top_p": 0.1,
        "n": 1,
        "stream": False,
        "max_tokens": 512,
        "repetition_penalty": 1
    }
    
    headers = {
        'Content-Type': CONTENT_TYPE_JSON,
        'Accept': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    response = requests.post(URL_CHAT, headers=headers, data=json.dumps(payload), verify=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
    return response.json()

def print_chat_response(chat_data):
    choices = chat_data.get("choices", [])
    if choices and "message" in choices[0]:
        print(choices[0]["message"]["content"])
    else:
        print("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'content'")

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.')

async def summarize(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–Ø –ø–æ–∫–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –±—É–¥—É –º—É—Å–æ–ª–∏—Ç—å –≤–∞–º –≥–ª–∞–∑–∞. –ú—É—á–∞–π—Ç–µ –ö–∞–ª–æ–≤—Ä–∞—Ç–∞! üí©')
    await update.message.reply_sticker(STICKER_FILE_ID)

def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("summarize", summarize))

    application.run_polling()

if __name__ == "__main__":
    try:
        access_token = get_access_token()
        if not access_token:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        else:
            chat_data = make_chat_request(access_token)
            print_chat_response(chat_data)
    except requests.RequestException as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")

    main()
